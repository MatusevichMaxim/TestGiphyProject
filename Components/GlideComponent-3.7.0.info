{"Name":"GlideComponent","Id":2989,"Alias":"GlideComponent","Description":"# Glide\n\nGlide is a fast and efficient open source media management and image loading framework for Android that wraps media decoding, memory and disk caching, and resource pooling into a simple and easy to use interface.\n\nGlide supports fetching, decoding, and displaying video stills, images, and animated GIFs. Glide includes a flexible API that allows developers to plug in to almost any network stack. By default Glide uses a custom HttpUrlConnection based stack, but also includes utility libraries plug in to Google\u0027s Volley project or Square\u0027s OkHttp library instead.\n\nGlide\u0027s primary focus is on making scrolling any kind of a list of images as smooth and fast as possible, but Glide is also effective for almost any case where you need to fetch, resize, and display a remote image.\n\n### Version\n3.7.0\n\n### Source code\nJava: https://github.com/bumptech/glide/\n\nXamarin Binding: https://github.com/thanhdatbkhn/GlideXamarinBinding\n","Version":"3.7.0","Summary":"Glide - Image loading \u0026 caching library","QuickStart":"# Getting Started with Glide\n\nGlide very easy to use. Just need one line of code to load an image from url to imageview.\n\n```sh\nGlide.With (context)\n    .Load (\"http://ketquaviet.vn/app/img/logo-kqv.png\")\n    .Into (imageView);\n```\nTransform image:\n\n```sh\nGlide.With (context)\n    .Load (\"http://ketquaviet.vn/app/img/logo-kqv.png\")\n    .Transform (new CircleTransform (context))\n    .Into (imageview);\n```\n```sh\npublic class CircleTransform : BitmapTransformation\n\t{\n\t\tpublic CircleTransform(Android.Content.Context context) : base(context)\n\t\t{\n\t\t}\n\n\t\tpublic override string Id\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn \"CircleTransform\";\n\t\t\t}\n\t\t}\n\n\t\tprotected override Bitmap Transform(IBitmapPool bitmapPool, Bitmap source, int outWidth, int outHeight)\n\t\t{\n\t\t\tint size = Math.Min(source.Width, source.Height);\n\n\t\t\tint width = (source.Width - size) / 2;\n\t\t\tint height = (source.Height - size) / 2;\n\n\t\t\tBitmap squaredBitmap = Bitmap.CreateBitmap(source, width, height, size, size);\n\t\t\tif (squaredBitmap != source)\n\t\t\t{\n\t\t\t\tsource.Recycle();\n\t\t\t}\n\n\t\t\tBitmap bitmap = Bitmap.CreateBitmap(size, size, Bitmap.Config.Argb8888);\n\n\t\t\tCanvas canvas = new Canvas(bitmap);\n\t\t\tPaint paint = new Paint();\n\t\t\tBitmapShader shader = new BitmapShader(squaredBitmap, BitmapShader.TileMode.Clamp,\n\t\t\t\t\tBitmapShader.TileMode.Clamp);\n\t\t\tpaint.SetShader(shader);\n\t\t\tpaint.AntiAlias = true;\n\n\t\t\tfloat r = size / 2f;\n\t\t\tcanvas.DrawCircle(r, r, r, paint);\n\n\t\t\tsquaredBitmap.Recycle();\n\n\t\t\treturn BitmapResource.Obtain(bitmap, bitmapPool).Get();\n\t\t}\n\t}\n```\n\nAnimate appearance\n```sh\nGlide.With (context)\n    .Load (\"http://ketquaviet.vn/app/img/logo-kqv.png\")\n\t.Animate (anim).Into (imageView);\n```","Hash":"88e9fb6c2bf5e5e1f79b5d01bdf0a6f1","TargetPlatforms":["android"],"TrialHash":null}